[{"title":"Basic Terminal Commands","text":"* ls - list files in current directory (folder)\n* mkdir - make a new directory (folder)\n* cd - change into a different directory\n* cd .. - goes up a level in directory (back out in to containing folder)\n* touch - create a new file\n* pwd - print our working directory\n* mv - rename a file\n* rm - remove a file (deletes a file completely - not send to trash)\n* rm -r - removes a folder with all files within (deletes files completely - not send to trash)\n* history - show all of the commands you have run\n* cmd k - clears the output on your terminal\n* code . (file name)- opens VCS\n* open . - opens in Finder the folder you are in\n* cp (file/folder name)- copy\n","id":"_az38caexc"},{"title":"Git","text":"Git is a distributed version-control system for tracking changes in source code during software development. It is designed for coordinating work among programmers, but it can be used to track changes in any set of files. Its goals include speed, data integrity, and support for distributed, non-linear workflows.","id":"_z7mscbdfk"},{"title":"Debugging Tips","text":"Tip #1: Start Small\nFocus your attention on the lines of code that are closest to the feature that is broken. For example, if clicking a button doesn't trigger a pop-up like you expected, look closely at the code associated with the button. Check your syntax carefully. Check how you've named things. Check your parentheses. Check your capitalization. Then move outward to the farther stretches of the code. \n\nTip #2: Reference Working Code\nAs a developer, you should think yourself as a curator of references. As you work with many examples of code, you are continually building a bank of good code. Whenever you face a task or an issue, you can always reference this Bank of Good Code to remember how to solve a previous problem. Professional developers constantly search through their own code and those of others to quickly tackle whatever issue is at hand. \n\nTip #3: Keep Your Code Clean\nDisorganized code is more difficult to read and debug; clean code makes errors easier to spot.\n\nTip #4: Read the Debug Error\nAs you proceed through the course, you will be introduced to browser-based debugging tools like Google Debugger. These tools will help flag troublesome lines of code that are difficult to spot. These debugging tools are incredibly powerful. However, they are only as powerful as the developer who utilizes them.\n\nTip #5: Test Often\nBe as minimalistic as possible. Get into the habit of making modest changes, saving those changes, and then immediately testing them in the browser. This way, you isolate the location and the number of bugs to only the block of code on which you are working.\n\nTip #6: Get Help\nCoders are constantly in communication with one another and with online developer communities.","id":"_24p4ghask"},{"title":"Node.js","text":"A technology that lets your run JavaScript anywhere but a web-browser.","id":"_s0l54bnni"},{"title":"Food Bank Needs","text":"The food bank is running low on ...\n\nBread\nEggs\nVegetables\nTortillas\nRice","id":"_x05bkr59o"}]